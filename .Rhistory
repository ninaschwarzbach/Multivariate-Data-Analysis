# then it becomes too many grids
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~displ)
# What plots does the following code make? What does . do?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .) # dot after = horizontal
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl) # dot before = vertical
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# 3.5.1 Exercises
# What happens if you facet on a continuous variable?
# then it becomes too many grids
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~displ)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
#   Read
?facet_wrap
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# left
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# right
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
# mapping is the argument that defines the geom (e.g. geom_point)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
# add multiple geoms into one plot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
# change the smooth function to represent a specific level only
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
mpg$class
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
# change the smooth function to represent a specific level only
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class = "subcompact"), se = FALSE)
mpg$class<-as.list(mpg$class)
# change the smooth function to represent a specific level only
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
mpg$class<-as.nominal(mpg$class)
mpg$class<-as.factor(mpg$class)
mpg<-ggplot2::mpg
mpg$class<-as.factor(mpg$class)
# change the smooth function to represent a specific level only
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class$subcompact), se = FALSE)
# change the smooth function to represent a specific level only
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class==class$subcompact), se = FALSE)
mpg$class<-as.vector(mpg$class)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
mpg$class <- as.character(mpg$class)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
library(ggplot2)
library(dplyr)
# Ensure class column is a character vector, not a factor
mpg$class <- as.character(mpg$class)
# Create the plot
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
#
?mpg
# 3.6.1 Exercises
# 1. What geom would you use to draw a line chart? A boxplot?
# A histogram? An area chart?
# they all exist at geom_boxplot etc
# 2. Run this code in your head and predict what the output will look like.
# Then, run the code in R and check your predictions.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
+     geom_point()+geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
+          geom_point()+geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(show.legend = F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv, show.legend = F)) +
geom_point() +
geom_smooth(show.legend = F)
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv, show.legend = F)) +
geom_point(show.legend = F) +
geom_smooth(show.legend = F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=F, group_by(class()))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=F, group=class)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=F, class)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=F, group=drive)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=F, group=drv)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=F, group="drv")
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group=drv)) +
geom_point() +
geom_smooth(se=F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=F, group=drv)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group=drv)) +
geom_point() +
geom_smooth(se=F)
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, se=F, group=drv))
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group=drv, se=F))
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group=drv, se=FALSE))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group=drv)) +
geom_point() +
geom_smooth(se=F)
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group=drv),  se=FALSE)
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)color=drv) +
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy),color=drv) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group=drv),  se=FALSE)
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy),color=drv)
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy,color=drv))
# third graph
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy,color=drv)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group=drv, color=drv),  se=FALSE)
# fourth graph
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy,color=drv)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy),
se=FALSE)
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy,color=drv)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group=drv),
se=FALSE)
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy,color=drv)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy,
group=drv, linetype=drv),
se=FALSE)
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv, pointtype=drv)
?geom_point
ggplot() +
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv, shape=21))
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv), shape=21)
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=white), shape=21)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=1), shape=21)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy), shape=21)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy), shape=21, color=1)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
# sixth graph
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy), shape=21, color=2)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy), shape=21, color=2)
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy), shape=21, color=2, size=6)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
# sixth graph
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy), shape=21, color=2, size=3)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy), shape=21, color=4, size=3)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
?color
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy), shape=21, color="white", size=3)  +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy,color=drv))
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy,color=drv)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy),
se=FALSE)
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy,color=drv)) +
geom_smooth(data=filter(mpg, class == "subcompact"), aes(x = displ, y = hwy),
se=FALSE)
library(tidyverse)
l ibrary(c("nycflights13", "gapminder", "Lahman"))
library(c("nycflights13", "gapminder", "Lahman"))
mtcars<-dput(mtcars) # put in environment
library(ggplot2)
mpg<-ggplot2::mpg
## 3.7 Statistical transformations
# bar chart
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
update(R)
require(installr) updateR()
require(installr) updateR()
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
if(!require(installr)) {
install.packages("installr");
require(installr)
if(!require(installr)) {
install.packages("installr");
require(installr))
install.packages("installr")
# geom_bar uses stat_count(), so you can also use
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
# doing it ouselves
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
# 2. You might want to override the default mapping from transformed
# variables to aesthetics. For example, you might want to display a
# bar chart of proportion, rather than count:
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
?brms
install.packages("tibble")
install.packages("ggplot2")
library(ggplot2)
library(tibble)
# 1. Generate data ----
# Fix the seed to generate pseudo random numbers:
set.seed(123)
n_groups <- 2
n_participants <- 30
n_data_points <- 20
patient_data <- tibble(
Group = rep("Patient", n_participants * n_data_points),
Participant = rep(1:n_participants, each=n_data_points),
Value = rnorm(n_participants * n_data_points, mean = 50, sd = 10)
)
View(patient_data)
# Clear the environment:
rm(list = ls())
library(ggplot2)
library(tibble)
# 1. Generate data ----
# Fix the seed to generate pseudo random numbers:
set.seed(123)
# Generate data:
n_groups <- 2
n_participants <- 30
n_data_points <- 20
mean_value <- 50
sd_patient <- 10
sd_control <- 5
effect_size <- 0.5
total_improvement <- effect_size * sd_control
# Simulating for control group
control_data <- tibble(
Group = rep("Control", n_participants * n_data_points),
Time = rep(1:n_data_points, n_participants),
Participant = rep(1:n_participants, each=n_data_points),
Value = rnorm(n_participants * n_data_points, mean = mean_value, sd = sd_control)
)
# Simulating for patient group with linear improvement
patient_data <- tibble(
Group = rep("Patient", n_participants * n_data_points),
Time = rep(1:n_data_points, n_participants),
Participant = rep(1:n_participants, each=n_data_points),
Value = rnorm(n_participants * n_data_points,
mean = mean_value - (total_improvement/2) + (total_improvement/n_data_points) * Time,
sd = sd_patient)
)
# Combining both datasets
combined_data <- rbind(patient_data, control_data)
View(combined_data)
# Generate data:
n_groups <- 2
n_participants <- 30
n_data_points <- 20
starting_value <- 50
sd_patient <- 10
sd_control <- 5
effect_size <- 0.5
total_improvement <- effect_size * sd_control                                   # I imagine most of these parameters to vary in the end
# Simulating for control group
control_data <- tibble(
Group = rep("Control", n_participants * n_data_points),
Time = rep(1:n_data_points, n_participants),
Participant = rep(1:n_participants, each=n_data_points),
Value = rnorm(n_participants * n_data_points, mean = starting_value, sd = sd_control)
)
# Simulating for patient group with a linear improvement
patient_data <- tibble(
Group = rep("Patient", n_participants * n_data_points),
Time = rep(1:n_data_points, n_participants),
Participant = rep(1:n_participants, each=n_data_points),
Value = rnorm(n_participants * n_data_points,
mean = starting_value + (total_improvement/n_data_points) * Time,
sd = sd_patient)
)
# Combining both datasets
combined_data <- rbind(patient_data, control_data)
# Displaying the first few rows
head(combined_data)
View(combined_data)
# 2. Preparing analyses
pre_point <- 1
post_point <- round(n_data_points * 0.8)
follow_up_point <- n_data_points
#    2.1 ANOVA at the post-point
post_data <- combined_data[combined_data$Time == post_point, ]
anova_result <- aov(Value ~ Group, data = post_data)
summary(anova_result)
combined_data$Value_diff <- with(combined_data,
ave(Value, ID, FUN = function(x) x[post_point] - x[1]))
#    2.2 Pre-post ANOVA
# Calculate pre-post differences for each participant
combined_data$Value_diff <- NA
combined_data$Value_diff[combined_data$Time == "post"] <-
combined_data$Value[combined_data$Time == "post"] -
combined_data$Value[combined_data$Time == "pre"]
diff_data <- subset(combined_data, Time == "post")
View(diff_data)
#    2.2 Pre-post ANOVA
# Calculate pre-post differences for each participant
combined_data$Value_diff <- NA
combined_data$Value_diff[combined_data$Time == "post"] <-
combined_data$Value[combined_data$Time == "post"] -
combined_data$Value[combined_data$Time == "pre"]
View(combined_data)
diff_data <- subset(combined_data, Time == "post")
View(diff_data)
#    2.2 Pre-post ANOVA
# Calculate pre-post differences for each participant
pre_values <- combined_data$Value[combined_data$Time == "pre"]
post_values <- combined_data$Value[combined_data$Time == "post"]
combined_data$Value_diff <- NA
combined_data$Value_diff[combined_data$Time == "post"] <- post_values - pre_values
diff_data <- subset(combined_data, Time == "post")
View(combined_data)
#    2.2 Pre-post ANOVA ### doesn't work
# Calculate pre-post differences for each participant
pre_values <- combined_data$Value[combined_data$Time == "pre"]
pre_values
# Clear the environment:
rm(list = ls())
# Load packages (install if needed with install.packages("pkg.name") ):
install.packages("tibble")
install.packages("tibble")
library(ggplot2)
library(tibble)
# 1. Generate data ----
# Fix the seed to generate pseudo random numbers:
set.seed(123)
# Parameters:
n_groups <- 2
n_participants <- 30
n_data_points <- 20
starting_value <- 50
sd_patient <- 10
sd_control <- 5
effect_size <- 0.5
total_improvement <- effect_size * sd_control                                   # I imagine most of these parameters to vary in the end
# Simulating for control group
control_data <- tibble(
Group = rep("Control", n_participants * n_data_points),
Time = rep(1:n_data_points, n_participants),
Participant = rep(1:n_participants, each=n_data_points),
Value = rnorm(n_participants * n_data_points, mean = starting_value, sd = sd_control)
)
# Simulating for patient group with a linear improvement
patient_data <- tibble(
Group = rep("Patient", n_participants * n_data_points),
Time = rep(1:n_data_points, n_participants),
Participant = rep(1:n_participants, each=n_data_points),
Value = rnorm(n_participants * n_data_points,
mean = starting_value + (total_improvement/n_data_points) * Time,
sd = sd_patient)
)
# Combining both datasets
combined_data <- rbind(patient_data, control_data)
View(combined_data)
# 2. Analysis ----
pre_point <- 1                                                               # first point of measurement
post_point <- round(n_data_points * 0.8)                                     # to split the data-set into post and follow-up
follow_up_point <- n_data_points                                             #follow up point (theoretically we could delete the data points in between 0.8 and 1)
post_point
follow_up_point <- n_data_points                                             #follow up point (theoretically we could delete the data points in between 0.8 and 1)
follow_up_point
#    2.1 ANOVA at the post-point
post_data <- combined_data[combined_data$Time == post_point, ]                  # combine only at post_point
View(post_data)
setwd("~/Documents/GitHub/Multivariate-Data-Analysis")
setwd("/Users/Nina/Desktop/github/Multivariate-Data-Analysis")
mydata     <- read.csv("data.csv")
reg.output <- lm(y ~ x, mydata)
# To do: Study the summary from reg.output
print(summary(reg.output))
# Summary:
summary(reg.output)
